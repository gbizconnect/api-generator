const { DynamoDBClient, GetItemCommand, PutItemCommand } = require("@aws-sdk/client-dynamodb");
const { marshall } = require("@aws-sdk/util-dynamodb");

const DDB_TABLE = process.env['DDB_TABLE'];
const config =  {region:  "ap-northeast-1"};
const client = new DynamoDBClient(config);

exports.handler = async(event, context, callback) => {

    let responseBody = {
        status: 500,
        message: "Internal Server Error",
    }
    
    const {{ pk.property }} = decodeURIComponent(event.pathParameters.{{ pk.property }});
{{#isExistSortKey}}
    const {{ sk.property }} = decodeURIComponent(event.pathParameters.{{ sk.property }});
{{/isExistSortKey}}

    try{
        const inputGetItem = {
            "Key": {
                "{{ pk.property }}": {
                    {{#pk.isString}}"S": {{ pk.property }}{{/pk.isString}}
                    {{^pk.isString}}"N": `${ {{ pk.property }} }`{{/pk.isString}}
                },
                {{#isExistSortKey}}
                "{{ sk.property }}": {
                    {{#sk.isString}}"S": {{ sk.property }}{{/sk.isString}}
                    {{^sk.isString}}"N": `${ {{ sk.property }} }`{{/sk.isString}}
                },
                {{/isExistSortKey}}
            },
            "TableName": DDB_TABLE
        }
        
        const commandGetItem = new GetItemCommand(inputGetItem);
        const responseGetItem = await client.send(commandGetItem);
        
        if(!responseGetItem.Item){
            responseBody.status = 404;
            responseBody.message = "data not found";
            return {
                statusCode: responseBody.status,
                body: JSON.stringify(responseBody),
                headers: {'Access-Control-Allow-Origin': '*',}
            };
        }
        
        const body = JSON.parse(event.body);
        
        for (const key in body) {
            if ({{#properties}}key !== '{{property_name}}' && {{/properties}}true) {
                responseBody.status = 400;
                responseBody.message = "invalid data";
                return {
                    statusCode: responseBody.status,
                    body: JSON.stringify(responseBody),
                    headers: {'Access-Control-Allow-Origin': '*',}
                };
            }
        }
        
        if({{ pk.property }} !== `${ body.{{ pk.property }} }`){
            responseBody.status = 400;
            responseBody.message = "invalid data";
            return {
                statusCode: responseBody.status,
                body: JSON.stringify(responseBody),
                headers: {'Access-Control-Allow-Origin': '*',}
            };
        }
{{#isExistSortKey}}
        if({{ sk.property }} !== `${ body.{{ sk.property }} }`){
            responseBody.status = 400;
            responseBody.message = "invalid data";
            return {
                statusCode: responseBody.status,
                body: JSON.stringify(responseBody),
                headers: {'Access-Control-Allow-Origin': '*',}
            };
        }
{{/isExistSortKey}}

    {{{checkProgram}}}
    
        const input = {
            "Item": marshall(body),
            "TableName": DDB_TABLE
        }
        
        const command = new PutItemCommand(input);
        const response = await client.send(command);
        
        responseBody.status = 200;
        responseBody.message = "succeeded";
        
    }catch(e){
        if(e.$response && e.$response.statusCode){
            responseBody.status = e.$response.statusCode
            responseBody.message = e.message;
        }
    }
    
    return {
        statusCode: responseBody.status,
        body: JSON.stringify(responseBody),
        headers: {'Access-Control-Allow-Origin': '*',}
    };
}

