const { DynamoDBClient, ExecuteStatementCommand } = require("@aws-sdk/client-dynamodb");
const { unmarshall } = require("@aws-sdk/util-dynamodb");

const DDB_TABLE = process.env['DDB_TABLE'];
const config =  {region:  "ap-northeast-1"};
const client = new DynamoDBClient(config);

const getSearchData = async function(_input) {
    let items = [];
    let input = _input;

    let command = new ExecuteStatementCommand(input);
    let response = await client.send(command);

    while(typeof response.NextToken !== "undefined") {
        items = items.concat(response.Items);
        input.NextToken = response.NextToken;
        command = new ExecuteStatementCommand(input);
        response = await client.send(command);
    }
    
    items = items.concat(response.Items);

    return items;
}

exports.handler = async(event, context, callback) => {

    const body = JSON.parse(event?.body);
    const condition = body?.condition;
    const indexName = (typeof body?.index_name !== "undefined") ? ".\"" + body?.index_name + "\" ": " ";
    
    let responseBody = {
        status: 500,
        message: "Internal Server Error",
        data: {},
    }
    
    try{
        const selectStatement = "SELECT * FROM \"" + DDB_TABLE + "\"" + indexName;
        let statement = selectStatement;
        if(condition){
            statement += "WHERE " + condition + ";";
        }else{
            statement += ";";
        }
        const input = {Statement: statement};
        const items = await getSearchData(input);

        if(items.length > 0){
            responseBody.status = 200;
            responseBody.message = "succeeded";
            let data = [];
            items.forEach(function(item){
                data.push(unmarshall(item));
            })
            responseBody.data = data;
        }else{
            responseBody.status = 404;
            responseBody.message = "data not found";
        }
    }catch(e){
        if(e.$response && e.$response.statusCode){
            responseBody.status = e.$response.statusCode
            responseBody.message = e.message;
        }
    }
    
    return {
        statusCode: responseBody.status,
        body: JSON.stringify(responseBody),
        headers: {'Access-Control-Allow-Origin': '*',}
    };
}